{"version":3,"sources":["components/Movies.js","App.js","reportWebVitals.js","index.js"],"names":["Movies","useState","actorList","setActorList","actorAId","setActorAId","actorBId","setActorBId","actorBMovies","setActorBMovies","actorAMovies","setActorAMovies","commonCostars","setCommonCostars","responseStatus","setResponseStatus","responseError","setResponseError","useEffect","Promise","all","fetch","method","headers","then","res","json","a","movieResults","actorResults","sort","b","name","filter","movie","actors","includes","actorAResult","title","actorACostars","forEach","actorId","index","findIndex","costar","costarAMovies","push","actorBResult","actorBCostars","costarBMovies","sharedCostars","aCostar","aCostarId","actor","aCostarName","bCostarsFiltered","bCostar","length","KRMovies","NCMovies","catch","error","console","log","className","value","onChange","e","parseInt","target","map","movieId","onClick","answer","JSON","stringify","body","status","result","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34a3cf96.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nfunction Movies() {\n    \n    const [actorList, setActorList] = useState([]);\n    const [actorAId, setActorAId] = useState();\n    const [actorBId, setActorBId] = useState();\n    const [actorBMovies, setActorBMovies] = useState([]);\n    const [actorAMovies, setActorAMovies] = useState([]);\n    const [commonCostars, setCommonCostars] = useState([]);\n    const [responseStatus, setResponseStatus] = useState('');\n    const [responseError, setResponseError] = useState('');\n\n    useEffect(() => {\n        \n        Promise.all([\n            fetch('https://switch-yam-equator.azurewebsites.net/api/movies', {\n                method: 'GET',\n                headers: {\n                    'x-chmura-cors': 'bcbaca57-51d3-45f9-8e32-0767c655575b'\n                }\n            })\n                .then(res => res.json()),\n            \n            fetch('https://switch-yam-equator.azurewebsites.net/api/actors', {\n                method: 'GET',\n                headers: {\n                    'x-chmura-cors': 'bcbaca57-51d3-45f9-8e32-0767c655575b'\n                }\n            })\n                .then(res => res.json()),\n            \n        ]).then(\n                async ([movieResults, actorResults]) => {\n                    // Sort the actor list \n                    await actorResults.sort((a, b) => {\n                        if (a.name < b.name) { return -1; }\n                        if (a.name > b.name) { return 1; }\n                        return 0;\n                    });\n                    setActorList(actorResults);\n                    \n                    // Filter Actor A movies and sort by title\n                    const actorAResult  = await movieResults.filter((movie) => movie.actors.includes(actorAId));\n                    await actorAResult.sort((a, b) => {\n                        if (a.title < b.title) { return -1; }\n                        if (a.title > b.title) { return 1; }\n                        return 0;\n                    });\n                    setActorAMovies(actorAResult);\n                    \n                    // Compile an array of Actor A costars\n                    const actorACostars = [];\n                    actorAResult.forEach((movie) => {\n                        movie.actors.forEach((actorId) => {\n                            let index = actorACostars.findIndex((costar) => costar.actorId === actorId)\n                            if (index >= 0) {\n                                actorACostars[index].costarAMovies.push(movie.title);\n                            } else {\n                                actorACostars.push({\n                                    actorId: actorId,\n                                    costarAMovies: [movie.title]\n                                });\n                            }    \n                        });\n                    });\n\n                    // Filter Actor B movies and sort by title\n                    const actorBResult = await movieResults.filter((movie) => movie.actors.includes(actorBId));\n                    await actorBResult.sort((a, b) => {\n                        if (a.title < b.title) { return -1; }\n                        if (a.title > b.title) { return 1; }\n                        return 0;\n                    });\n                    setActorBMovies(actorBResult);\n\n                    // Compile an array of Actor B costars\n                    const actorBCostars = [];\n                    actorBResult.forEach((movie) => {\n                        movie.actors.forEach((actorId) => {\n                            let index = actorBCostars.findIndex((costar) => costar.actorId === actorId)\n                            if (index >= 0) {\n                                actorBCostars[index].costarBMovies.push(movie.title);\n                            } else {\n                                actorBCostars.push({\n                                    actorId: actorId,\n                                    costarBMovies: [movie.title]\n                                });\n                            }    \n                        });\n                    });\n                    \n                    // Compile an array of costars that Actor A and Actor B have in common\n                    const sharedCostars = [];\n                    actorACostars.forEach((aCostar) => {\n                        let aCostarId = aCostar.actorId;\n                        let index = actorResults.findIndex((actor) => actor.actorId === aCostarId);\n                        let aCostarName = actorResults[index].name;\n                        let bCostarsFiltered = actorBCostars.filter((bCostar) => bCostar.actorId === aCostarId);\n    \n                        // Name object keys based on the expected request (\"KRMovies\" and \"NCMovies\")\n                        if (bCostarsFiltered.length > 0) {\n                            sharedCostars.push({\n                                actorId: aCostar.actorId,\n                                name: aCostarName,\n                                KRMovies: bCostarsFiltered[0].costarBMovies, \n                                NCMovies: aCostar.costarAMovies\n                            });\n                        }\n                    });\n                    setCommonCostars(sharedCostars);\n\n                })\n                .catch(error => {\n                    console.log(error)\n                });\n\n    }, [actorAId, actorBId]);\n    \n    // Set state (and trigger useEffect) when a new actor is selected\n    const handleActorAChange = (e) => {\n        setActorAId(parseInt(e.target.value));\n        setResponseStatus('');    \n    }\n    \n    const handleActorBChange = (e) => {\n        setActorBId(parseInt(e.target.value));\n        setResponseStatus('');\n    }\n\n    // Submit a POST request to the API with your answer\n    const submitAnswer = () => {\n        let answer = JSON.stringify(commonCostars);\n\n        fetch('https://switch-yam-equator.azurewebsites.net/api/validation', {\n                method: 'POST',\n                headers: {\n                    'x-chmura-cors': 'bcbaca57-51d3-45f9-8e32-0767c655575b',\n                    'Content-Type': 'application/json'\n                },\n                body: answer\n            })\n\n            .then((res) => {\n                setResponseStatus(res.status);\n                if (res.status !== 200) {\n                    return res.json()\n                } else {\n                    return res.status;\n                }\n            })\n            .then(\n                (result) => {\n                    if(result.error) {\n                        setResponseError(result.error);\n                        console.log(result.error);\n                    }\n            })\n            .catch(error => {\n                console.log(error)\n            });\n    }\n    \n  \n    return (\n                    \n        <div className=\"movie-div\">\n\n            <div className=\"actor-selector\">\n                <h3>Select Actor A</h3>\n                <select value={actorAId} onChange={handleActorAChange}>\n                    <option key=\"defaultA\">Select actor A</option>\n                    {actorList.map((actor) => {\n                        return (\n                            <option key={actor.actorId} value={actor.actorId}>{actor.name}</option>\n                        )\n                    })}\n                </select>\n            \n                <div>\n                    <h3>Actor A's movies:</h3>\n                    {actorAMovies.map((movie) => {\n                        return (\n                            <li key={movie.movieId}>{movie.title}</li>\n                        )\n                    })}\n                </div>\n            </div>\n\n            <div className=\"actor-selector\">\n                <h3>Select Actor B</h3>\n                <select value={actorBId} onChange={handleActorBChange}>\n                    <option key=\"defaultB\">Select actor B</option>\n                    {actorList.map((actor) => {\n                        return (\n                            <option key={actor.actorId} value={actor.actorId}>{actor.name}</option>\n                        )\n                    })}\n                </select>\n                    \n                <div>\n                    <h3>Actor B's movies:</h3>\n                    {actorBMovies.map((movie) => {\n                        return (\n                            <li key={movie.movieId}>{movie.title}</li>\n                        )\n                    })}\n                </div>\n            </div>\n            \n            <div className=\"result-pane\">\n                <div className=\"results-list\">\n                    <h3>Costars Actor A and Actor B have in common:</h3>\n                    {commonCostars.map((costar) => {\n                        return (\n                            <li key={costar.actorId}>{costar.name}</li>\n                        )\n                    })}\n                </div>\n            \n                <div className=\"submit-box\">\n                    <button className=\"submit-button\" onClick={submitAnswer}>Submit answer</button>\n                    <div className=\"submit-text-div\">Response status: <span className={responseStatus === 200 ? 'green-text': 'red-text'}>{responseStatus}</span></div>\n                    {responseStatus === 200\n                            ? <div className=\"submit-text-div\">Correct response!</div>\n                            : (responseStatus === ''\n                                ? <div className=\"submit-text-div\">Awaiting submission...</div>\n                                : <div className=\"submit-text-div\">Incorrect response - {responseError}</div>\n                            )}\n                </div>\n            </div>\n        </div>\n    );\n    \n}\n\nexport default Movies;","import Movies from './components/Movies';\nimport './components/Movies.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Chmura Code Assessment: Common Costar Finder</h1>  \n      <div className=\"directions-box\">\n        <b>Directions:</b> Use the drop down menus to select any combination of actors. Actors that have costarred in both a movie with Actor A and Actor B (not necessarily at the same time) will be displayed in the right-hand panel. \n        <p><b>Validation:</b> To validate the app is working properly, set Actor A to <b>Nicolas Cage</b> and set Actor B to <b>Keanu Reeves</b>, then click the \"submit\" button to send that request to the API and validate. (Costar's movies are stored in the request object but not displayed on the page.)</p>\n        <p><b>Thank you!</b> for the opportunity to apply, I really had fun working on this assessment and hopefully it demonstrates some of my skillset!</p>\n      </div>\n      \n      <Movies />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}